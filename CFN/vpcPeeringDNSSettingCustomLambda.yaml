---
AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC that and then creates a peering connection with an existing
  VPC that you specify.
Parameters:
  myVPCIDCIDRRange:
    Description: The IP address range for your new VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.1.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  myPrivateVPCIDCIDRRange:
    Description: The IP address range for your new Private VPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/16
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2SubnetCIDRRange:
    Description: The IP address range for a subnet in myPrivateVPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.0.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  EC2PublicSubnetCIDRRange:
    Description: The IP address range for a subnet in myVPC.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.1.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Resources:
  myPrivateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: myPrivateVPCIDCIDRRange
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  myPrivateEC2Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myPrivateVPC
      CidrBlock:
        Ref: EC2SubnetCIDRRange
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myPrivateVPC
  PeeringRoute1:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId:
        Ref: RouteTable
      VpcPeeringConnectionId:
        Ref: myVPCPeeringConnection
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: myPrivateEC2Subnet
      RouteTableId:
        Ref: RouteTable
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: myVPCIDCIDRRange
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock:
        Ref: EC2PublicSubnetCIDRRange
      VpcId:
        Ref: myVPC
  myInternetGateway:
    Type: AWS::EC2::InternetGateway
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
  PeeringRoute2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock:
        Ref: myPrivateVPCIDCIDRRange
      RouteTableId:
        Ref: PublicRouteTable
      VpcPeeringConnectionId:
        Ref: myVPCPeeringConnection
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet
      RouteTableId:
        Ref: PublicRouteTable
  myVPCPeeringConnection:
    Type: AWS::EC2::VPCPeeringConnection
    Properties:
      VpcId:
        Ref: myVPC
      PeerVpcId:
        Ref: myPrivateVPC

  # Creates Custom Resource to Enable the VPC Peering's DNS Resolution
  #Lambda Function
  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn: "LambdaExecutionRole"
    Properties:
      Handler: "index.handler"
      Role:
        Fn::GetAtt:
          - "LambdaExecutionRole"
          - "Arn"
      Code:
        ZipFile: >
          var AWS = require('aws-sdk');

          var ec2 = new AWS.EC2();

          var response = require('cfn-response');

          exports.handler = (event, context, callback) => {
              var vpcPeeringID = event.ResourceProperties.vpcPeeringID;
              var responseData = {};

              var params = {
                  VpcPeeringConnectionId: vpcPeeringID, /* required */
                  AccepterPeeringConnectionOptions: {
                      AllowDnsResolutionFromRemoteVpc: true
                  },
                  RequesterPeeringConnectionOptions: {
                      AllowDnsResolutionFromRemoteVpc: true
                  }
              };

              if (event.RequestType == 'Delete') {
              response.send(event, context, response.SUCCESS);
              return;
              }

              //Change VPC Peering's DNS option
              ec2.modifyVpcPeeringConnectionOptions(params, function(err, data) {
                if (err) {
                  console.log(err, err.stack); // an error occurred
                  responseData = {Error: 'Create call failed'};
                  response.send(event, context, response.FAILED, responseData);
                }
                else {
                  response.send(event, context, response.SUCCESS, responseData);
                  console.log(data);  // successful response
                }
              });

          };
      Runtime: "nodejs8.10"
      Timeout: "25"

  #LambdaRole
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: EnableModifyPeeringOptions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Action:
                - 'ec2:ModifyVpcPeeringConnectionOptions'
              Resource: '*'
              Effect: Allow

  #ExecutionRole
  CreateNestedExecutePermission:
    Type: 'AWS::Lambda::Permission'
    DependsOn:
    - 'LambdaExecutionRole'
    - 'myVPCPeeringConnection'
    Properties:
      Action: 'lambda:InvokeFunction'
      Principal: '*'
      FunctionName:
        Fn::GetAtt:
          - "LambdaFunction"
          - "Arn"

  #Execute Lambda
  RunLambda:
    Type: "Custom::RunLambdaFunction"
    DependsOn: 'CreateNestedExecutePermission'
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "LambdaFunction"
          - "Arn"
      vpcPeeringID: !Ref myVPCPeeringConnection
